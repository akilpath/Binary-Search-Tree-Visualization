<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.HBox?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>
<?import javafx.scene.text.Text?>
<?import javafx.scene.text.TextFlow?>

<VBox alignment="CENTER" spacing="20.0" style="-fx-background-color: #04cccc; -fx-spacing: 75;" xmlns="http://javafx.com/javafx/17" xmlns:fx="http://javafx.com/fxml/1" fx:controller="SecondaryController">
    <children>
      <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" style="-fx-spacing: 50;" VBox.vgrow="ALWAYS">
         <children>
            <VBox alignment="CENTER_LEFT" prefHeight="200.0" prefWidth="100.0">
               <children>
                  <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="What is a binary search tree?">
                     <font>
                        <Font name="Microsoft YaHei Bold" size="36.0" />
                     </font>
                  </Text>
                  <TextFlow prefHeight="200.0" prefWidth="200.0">
                     <children>
                        <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="A Binary Search Tree or BST is a tree where nodes can have 0, 1 or 2 children. In a BST, the left child is less than the parent and the right child is greater than or equal to the parent. Every BST has a root node, which is a node that has no parent, everything that gets added to the BST is added to the root node, additions to the tree are done recursively, which also means that a BST is made up of smaller BSTs, you can see this in the visualization..">
                           <font>
                              <Font name="Microsoft YaHei Light" size="18.0" />
                           </font>
                        </Text>
                     </children>
                  </TextFlow>
               </children>
            </VBox>
            <VBox alignment="CENTER" prefHeight="200.0" prefWidth="100.0">
               <children>
                  <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" style="-fx-line-spacing: 50;" text="How a binary search tree sorts itself!">
                     <font>
                        <Font name="Microsoft YaHei Bold" size="36.0" />
                     </font>
                  </Text>
                  <TextFlow prefHeight="200.0" prefWidth="200.0">
                     <children>
                        <Text fill="WHITE" strokeType="OUTSIDE" strokeWidth="0.0" text="A treesort relies on the fact that the left node is less than the parent, and the right node is greater than or equal to the parent. In order to get everything in order, you must look to the left, look at the parent, then look at the right. For example, lets say you have a BST with three nodes on it. The left node is the least, the parent node is the median and the right node is the greatest. Since a BST is made up of subtrees which are also BSTs, this process can be applied recursively in order to get all the values in sorted order. ">
                           <font>
                              <Font name="Microsoft YaHei Light" size="18.0" />
                           </font>
                        </Text>
                     </children>
                  </TextFlow>
               </children>
            </VBox>
         </children>
      </HBox>
        <Button fx:id="secondaryButton" alignment="CENTER" onAction="#switchToPrimary" style="-fx-background-color: transparent;" text="Back" textFill="WHITE">
         <font>
            <Font name="Microsoft YaHei Light" size="14.0" />
         </font></Button>
    </children>
    <padding>
        <Insets bottom="20.0" left="20.0" right="20.0" top="20.0" />
    </padding>
</VBox>
